#name: CD
#
#on:
#  push:
#    branches:
#      - deploy
#
#jobs:
#  deploy:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      - name: test and build
#        run: ./gradlew clean build -x test
#
#      - name: change build file name
#        run: mv ./build/libs/*SNAPSHOT.jar ./project.jar
#
#      - name: use SCP to send build file to EC2
#        uses: appleboy/scp-action@v0.1.7
#        with:
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USERNAME }}
#          key: ${{secrets.EC2_PRIVATE_KEY }}
#          source: project.jar
#          target: /home/ec2-user/Moim-BE/willrun
#
#      - name: connect EC2 through SSH
#        uses: appleboy/ssh-action@v1.0.3
#        with:
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USERNAME }}
#          key: ${{secrets.EC2_PRIVATE_KEY }}
#          script: |
#            rm -rf /home/ec2-user/Moim-BE/running
#            mkdir /home/ec2-user/Moim-BE/running
#            mv /home/ec2-user/Moim-BE/willrun/project.jar /home/ec2-user/Moim-BE/running/project.jar
#            cd /home/ec2-user/Moim-BE/running
#            sudo fuser -k - tcp 8080 || true
#            nohup java -jar project.jar > ./output.log 2>&1 &
#            rm -rf /home/ec2-user/Moim-BE/willrun

name: CD

on:
  push:
    branches:
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      - name: Add SSH host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Set up SSH private key
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/private_key.pem
          chmod 600 ~/.ssh/private_key.pem

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Upload JAR to Remote Server
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/private_key.pem
          chmod 600 ~/.ssh/private_key.pem
          scp -i ~/.ssh/private_key.pem build/libs/moim-0.0.1-SNAPSHOT.jar ${{ secrets.USERNAME }}@${{ secrets.HOST }}:${{ secrets.APP_DIR }}
        env:
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}

      - name: Deploy to Remote Server
        run: |
          ssh -i ~/.ssh/private_key.pem ${{ secrets.USERNAME }}@${{ secrets.HOST }} '
            export APP_DIR="${{ secrets.APP_DIR }}";
            export DB="${{ secrets.DB }}";
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}";
            export DB_USERNAME="${{ secrets.DB_USERNAME }}";
            export HOST="${{ secrets.HOST }}";
#            export JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}";
#            export S3_ACCESS_KEY="${{ secrets.S3_ACCESS_KEY }}";
#            export S3_SECRET_KEY="${{ secrets.S3_SECRET_KEY }}";
#            export BUCKET_NAME="${{ secrets.BUCKET_NAME }}";
            bash -s
          ' < ./deploy.sh
        env:
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          APP_DIR: ${{ secrets.APP_DIR }}
          DB: ${{ secrets.DB }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          HOST: ${{ secrets.HOST }}
#          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
#          S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
#          S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
#          BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
